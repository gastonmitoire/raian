// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  profile          Profile?
  images           Image[]
  booksIllustrated Book[]          @relation("Illustrator")
  booksPublished   Book[]          @relation("Publisher")
  comments         Comment[]
  sentMessages     Message[]       @relation("sentMessages")
  receivedMessages Message[]       @relation("receivedMessages")
  conversations    Conversation[]  @relation("conversationUsers")
  notifications    Notifications[]
  fanarts          Fanart[]
  username         String          @unique
  email            String?         @unique
  passwordHash     String
  role             String          @default("USER")
}

model Profile {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @unique
  settings    UserSettings?
  bio         String?
  image       String?
  displayName String?
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
}

model UserSettings {
  id                 String  @id @default(uuid())
  profile            Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId          String  @unique
  emailNotifications Boolean @default(true)
  theme              String  @default("dark")
}

model Book {
  id              String    @id @default(uuid())
  genre           Genre?    @relation(fields: [genreId], references: [id])
  genreId         String?
  chapters        Chapter[]
  illustrator     User?     @relation(fields: [illustratorId], references: [id], name: "Illustrator")
  illustratorId   String?
  publisher       User?     @relation(fields: [publisherId], references: [id], name: "Publisher")
  publisherId     String?
  comments        Comment[]
  title           String    @unique
  description     String
  type            String
  publicationDate String
  cover           String
  secondaryImage  String
}

model Image {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fanarts   Fanart[]
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  mimetype  String?
  encoding  String?
  filename  String
  url       String
}

model Chapter {
  id     String  @id @default(uuid())
  book   Book    @relation(fields: [bookId], references: [id])
  bookId String
  text   Text[]
  title  String
  type   String?
  order  Int
}

model Text {
  id        String  @id @default(uuid())
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String
  content   String
  title     String?
  type      String?
  image     String?
}

model Genre {
  id       String @id @default(uuid())
  books    Book[]
  name     String
  nameSlug String @unique
  ageRange String
}

model Fanart {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  image       Image    @relation(fields: [imageId], references: [id])
  imageId     String
  title       String
  description String?
  likes       Int      @default(0)
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  book      Book?    @relation(fields: [bookId], references: [id])
  bookId    String?
  text      String
}

model Conversation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]    @relation("conversationUsers")
  messages  Message[]
  title     String
}

model Message {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  content        String
  sender         User         @relation("sentMessages", fields: [userId], references: [id])
  recipient      User         @relation("receivedMessages", fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  userId         String
}

model Notifications {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  type    String
  read    Boolean  @default(false)
  message String
  link    String
  expires DateTime
}

model Contact {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  email     String
  message   String
  subject   String   @default("general")
}
